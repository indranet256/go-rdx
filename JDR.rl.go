package rdx

// action indices for the parser

const (
	JDRenum      = 0
	JDRNL        = JDRenum + 1
	JDRUtf8cp1   = JDRenum + 10
	JDRUtf8cp2   = JDRenum + 11
	JDRUtf8cp3   = JDRenum + 12
	JDRUtf8cp4   = JDRenum + 13
	JDRInt       = JDRenum + 19
	JDRFloat     = JDRenum + 20
	JDRTerm      = JDRenum + 21
	JDRRef       = JDRenum + 22
	JDRString    = JDRenum + 23
	JDRMLString  = JDRenum + 24
	JDRStamp     = JDRenum + 25
	JDRNoStamp   = JDRenum + 26
	JDROpenP     = JDRenum + 27
	JDRCloseP    = JDRenum + 28
	JDROpenL     = JDRenum + 29
	JDRCloseL    = JDRenum + 30
	JDROpenE     = JDRenum + 31
	JDRCloseE    = JDRenum + 32
	JDROpenX     = JDRenum + 33
	JDRCloseX    = JDRenum + 34
	JDRComma     = JDRenum + 35
	JDRColon     = JDRenum + 36
	JDRSemicolon = JDRenum + 37
	JDROpen      = JDRenum + 38
	JDRClose     = JDRenum + 39
	JDRInter     = JDRenum + 40
	JDRFIRST     = JDRenum + 42
	JDRRoot      = JDRenum + 43
)

// user functions (callbacks) for the parser
// func JDRonNL (tok []byte, state *JDRstate) error
// func JDRonUtf8cp1 (tok []byte, state *JDRstate) error
// func JDRonUtf8cp2 (tok []byte, state *JDRstate) error
// func JDRonUtf8cp3 (tok []byte, state *JDRstate) error
// func JDRonUtf8cp4 (tok []byte, state *JDRstate) error
// func JDRonInt (tok []byte, state *JDRstate) error
// func JDRonFloat (tok []byte, state *JDRstate) error
// func JDRonTerm (tok []byte, state *JDRstate) error
// func JDRonRef (tok []byte, state *JDRstate) error
// func JDRonString (tok []byte, state *JDRstate) error
// func JDRonMLString (tok []byte, state *JDRstate) error
// func JDRonStamp (tok []byte, state *JDRstate) error
// func JDRonNoStamp (tok []byte, state *JDRstate) error
// func JDRonOpenP (tok []byte, state *JDRstate) error
// func JDRonCloseP (tok []byte, state *JDRstate) error
// func JDRonOpenL (tok []byte, state *JDRstate) error
// func JDRonCloseL (tok []byte, state *JDRstate) error
// func JDRonOpenE (tok []byte, state *JDRstate) error
// func JDRonCloseE (tok []byte, state *JDRstate) error
// func JDRonOpenX (tok []byte, state *JDRstate) error
// func JDRonCloseX (tok []byte, state *JDRstate) error
// func JDRonComma (tok []byte, state *JDRstate) error
// func JDRonColon (tok []byte, state *JDRstate) error
// func JDRonSemicolon (tok []byte, state *JDRstate) error
// func JDRonOpen (tok []byte, state *JDRstate) error
// func JDRonClose (tok []byte, state *JDRstate) error
// func JDRonInter (tok []byte, state *JDRstate) error
// func JDRonFIRST (tok []byte, state *JDRstate) error
// func JDRonRoot (tok []byte, state *JDRstate) error

var _JDR_actions []byte = []byte{
	0, 1, 0, 1, 1, 1, 2, 1, 3,
	1, 4, 1, 5, 1, 6, 1, 7,
	1, 8, 1, 9, 1, 11, 1, 13,
	1, 15, 1, 17, 1, 19, 1, 21,
	1, 22, 1, 23, 1, 27, 1, 29,
	1, 31, 1, 33, 1, 35, 1, 37,
	1, 39, 1, 41, 1, 43, 1, 45,
	1, 47, 1, 56, 1, 57, 2, 1,
	0, 2, 1, 22, 2, 1, 57, 2,
	3, 2, 2, 3, 4, 2, 3, 6,
	2, 3, 8, 2, 5, 2, 2, 5,
	4, 2, 5, 6, 2, 5, 8, 2,
	7, 2, 2, 7, 4, 2, 7, 6,
	2, 7, 8, 2, 9, 2, 2, 9,
	4, 2, 9, 6, 2, 9, 8, 2,
	11, 0, 2, 11, 22, 2, 13, 0,
	2, 13, 22, 2, 15, 0, 2, 15,
	22, 2, 17, 0, 2, 17, 22, 2,
	19, 0, 2, 19, 22, 2, 21, 0,
	2, 21, 22, 2, 23, 0, 2, 27,
	0, 2, 27, 22, 2, 29, 0, 2,
	31, 0, 2, 31, 22, 2, 33, 0,
	2, 35, 0, 2, 35, 22, 2, 37,
	0, 2, 39, 0, 2, 39, 22, 2,
	41, 0, 2, 43, 0, 2, 45, 0,
	2, 47, 0, 2, 48, 26, 2, 48,
	30, 2, 48, 34, 2, 48, 38, 2,
	49, 57, 2, 50, 28, 2, 50, 32,
	2, 50, 36, 2, 50, 40, 2, 51,
	57, 2, 52, 42, 2, 52, 44, 2,
	52, 46, 2, 53, 57, 2, 54, 18,
	2, 54, 20, 2, 55, 57, 2, 56,
	0, 2, 56, 57, 3, 1, 48, 26,
	3, 1, 48, 30, 3, 1, 48, 34,
	3, 1, 48, 38, 3, 1, 49, 57,
	3, 1, 50, 28, 3, 1, 50, 32,
	3, 1, 50, 36, 3, 1, 50, 40,
	3, 1, 51, 57, 3, 1, 52, 42,
	3, 1, 52, 44, 3, 1, 52, 46,
	3, 1, 53, 57, 3, 1, 54, 18,
	3, 1, 54, 20, 3, 1, 55, 57,
	3, 23, 49, 57, 3, 23, 55, 57,
	3, 29, 51, 57, 3, 33, 51, 57,
	3, 37, 51, 57, 3, 41, 51, 57,
	3, 43, 53, 57, 3, 45, 53, 57,
	3, 47, 53, 57, 3, 49, 48, 26,
	3, 49, 48, 30, 3, 49, 48, 34,
	3, 49, 48, 38, 3, 49, 50, 28,
	3, 49, 50, 32, 3, 49, 50, 36,
	3, 49, 50, 40, 3, 49, 52, 42,
	3, 49, 52, 44, 3, 49, 52, 46,
	3, 49, 54, 18, 3, 49, 54, 20,
	3, 51, 48, 26, 3, 51, 48, 30,
	3, 51, 48, 34, 3, 51, 48, 38,
	3, 51, 50, 28, 3, 51, 50, 32,
	3, 51, 50, 36, 3, 51, 50, 40,
	3, 51, 52, 42, 3, 51, 52, 44,
	3, 51, 52, 46, 3, 51, 54, 18,
	3, 51, 54, 20, 3, 53, 48, 26,
	3, 53, 48, 30, 3, 53, 48, 34,
	3, 53, 48, 38, 3, 53, 50, 28,
	3, 53, 50, 32, 3, 53, 50, 36,
	3, 53, 50, 40, 3, 53, 52, 42,
	3, 53, 52, 44, 3, 53, 52, 46,
	3, 53, 54, 18, 3, 53, 54, 20,
	3, 54, 12, 10, 3, 54, 16, 14,
	3, 55, 48, 26, 3, 55, 48, 30,
	3, 55, 48, 34, 3, 55, 48, 38,
	3, 55, 50, 28, 3, 55, 50, 32,
	3, 55, 50, 36, 3, 55, 50, 40,
	3, 55, 52, 42, 3, 55, 52, 44,
	3, 55, 52, 46, 3, 55, 54, 18,
	3, 55, 54, 20, 3, 56, 48, 26,
	3, 56, 48, 30, 3, 56, 48, 34,
	3, 56, 48, 38, 3, 56, 50, 28,
	3, 56, 50, 32, 3, 56, 50, 36,
	3, 56, 50, 40, 3, 56, 52, 42,
	3, 56, 52, 44, 3, 56, 52, 46,
	3, 56, 54, 18, 3, 56, 54, 20,
	4, 1, 49, 48, 26, 4, 1, 49,
	48, 30, 4, 1, 49, 48, 34, 4,
	1, 49, 48, 38, 4, 1, 49, 50,
	28, 4, 1, 49, 50, 32, 4, 1,
	49, 50, 36, 4, 1, 49, 50, 40,
	4, 1, 49, 52, 42, 4, 1, 49,
	52, 44, 4, 1, 49, 52, 46, 4,
	1, 49, 54, 18, 4, 1, 49, 54,
	20, 4, 1, 51, 48, 26, 4, 1,
	51, 48, 30, 4, 1, 51, 48, 34,
	4, 1, 51, 48, 38, 4, 1, 51,
	50, 28, 4, 1, 51, 50, 32, 4,
	1, 51, 50, 36, 4, 1, 51, 50,
	40, 4, 1, 51, 52, 42, 4, 1,
	51, 52, 44, 4, 1, 51, 52, 46,
	4, 1, 51, 54, 18, 4, 1, 51,
	54, 20, 4, 1, 53, 48, 26, 4,
	1, 53, 48, 30, 4, 1, 53, 48,
	34, 4, 1, 53, 48, 38, 4, 1,
	53, 50, 28, 4, 1, 53, 50, 32,
	4, 1, 53, 50, 36, 4, 1, 53,
	50, 40, 4, 1, 53, 52, 42, 4,
	1, 53, 52, 44, 4, 1, 53, 52,
	46, 4, 1, 53, 54, 18, 4, 1,
	53, 54, 20, 4, 1, 54, 12, 10,
	4, 1, 54, 16, 14, 4, 1, 55,
	48, 26, 4, 1, 55, 48, 30, 4,
	1, 55, 48, 34, 4, 1, 55, 48,
	38, 4, 1, 55, 50, 28, 4, 1,
	55, 50, 32, 4, 1, 55, 50, 36,
	4, 1, 55, 50, 40, 4, 1, 55,
	52, 42, 4, 1, 55, 52, 44, 4,
	1, 55, 52, 46, 4, 1, 55, 54,
	18, 4, 1, 55, 54, 20, 4, 23,
	49, 48, 26, 4, 23, 49, 48, 30,
	4, 23, 49, 48, 34, 4, 23, 49,
	48, 38, 4, 23, 49, 50, 28, 4,
	23, 49, 50, 32, 4, 23, 49, 50,
	36, 4, 23, 49, 50, 40, 4, 23,
	49, 52, 42, 4, 23, 49, 52, 44,
	4, 23, 49, 52, 46, 4, 23, 49,
	54, 18, 4, 23, 49, 54, 20, 4,
	23, 55, 48, 26, 4, 23, 55, 48,
	30, 4, 23, 55, 48, 34, 4, 23,
	55, 48, 38, 4, 23, 55, 50, 28,
	4, 23, 55, 50, 32, 4, 23, 55,
	50, 36, 4, 23, 55, 50, 40, 4,
	23, 55, 52, 42, 4, 23, 55, 52,
	44, 4, 23, 55, 52, 46, 4, 23,
	55, 54, 18, 4, 23, 55, 54, 20,
	4, 24, 25, 49, 57, 4, 24, 25,
	55, 57, 4, 29, 51, 48, 26, 4,
	29, 51, 48, 30, 4, 29, 51, 48,
	34, 4, 29, 51, 48, 38, 4, 29,
	51, 50, 28, 4, 29, 51, 50, 32,
	4, 29, 51, 50, 36, 4, 29, 51,
	50, 40, 4, 29, 51, 52, 42, 4,
	29, 51, 52, 44, 4, 29, 51, 52,
	46, 4, 29, 51, 54, 18, 4, 29,
	51, 54, 20, 4, 33, 51, 48, 26,
	4, 33, 51, 48, 30, 4, 33, 51,
	48, 34, 4, 33, 51, 48, 38, 4,
	33, 51, 50, 28, 4, 33, 51, 50,
	32, 4, 33, 51, 50, 36, 4, 33,
	51, 50, 40, 4, 33, 51, 52, 42,
	4, 33, 51, 52, 44, 4, 33, 51,
	52, 46, 4, 33, 51, 54, 18, 4,
	33, 51, 54, 20, 4, 37, 51, 48,
	26, 4, 37, 51, 48, 30, 4, 37,
	51, 48, 34, 4, 37, 51, 48, 38,
	4, 37, 51, 50, 28, 4, 37, 51,
	50, 32, 4, 37, 51, 50, 36, 4,
	37, 51, 50, 40, 4, 37, 51, 52,
	42, 4, 37, 51, 52, 44, 4, 37,
	51, 52, 46, 4, 37, 51, 54, 18,
	4, 37, 51, 54, 20, 4, 41, 51,
	48, 26, 4, 41, 51, 48, 30, 4,
	41, 51, 48, 34, 4, 41, 51, 48,
	38, 4, 41, 51, 50, 28, 4, 41,
	51, 50, 32, 4, 41, 51, 50, 36,
	4, 41, 51, 50, 40, 4, 41, 51,
	52, 42, 4, 41, 51, 52, 44, 4,
	41, 51, 52, 46, 4, 41, 51, 54,
	18, 4, 41, 51, 54, 20, 4, 43,
	53, 48, 26, 4, 43, 53, 48, 30,
	4, 43, 53, 48, 34, 4, 43, 53,
	48, 38, 4, 43, 53, 50, 28, 4,
	43, 53, 50, 32, 4, 43, 53, 50,
	36, 4, 43, 53, 50, 40, 4, 43,
	53, 52, 42, 4, 43, 53, 52, 44,
	4, 43, 53, 52, 46, 4, 43, 53,
	54, 18, 4, 43, 53, 54, 20, 4,
	45, 53, 48, 26, 4, 45, 53, 48,
	30, 4, 45, 53, 48, 34, 4, 45,
	53, 48, 38, 4, 45, 53, 50, 28,
	4, 45, 53, 50, 32, 4, 45, 53,
	50, 36, 4, 45, 53, 50, 40, 4,
	45, 53, 52, 42, 4, 45, 53, 52,
	44, 4, 45, 53, 52, 46, 4, 45,
	53, 54, 18, 4, 45, 53, 54, 20,
	4, 47, 53, 48, 26, 4, 47, 53,
	48, 30, 4, 47, 53, 48, 34, 4,
	47, 53, 48, 38, 4, 47, 53, 50,
	28, 4, 47, 53, 50, 32, 4, 47,
	53, 50, 36, 4, 47, 53, 50, 40,
	4, 47, 53, 52, 42, 4, 47, 53,
	52, 44, 4, 47, 53, 52, 46, 4,
	47, 53, 54, 18, 4, 47, 53, 54,
	20, 4, 49, 54, 12, 10, 4, 49,
	54, 16, 14, 4, 51, 54, 12, 10,
	4, 51, 54, 16, 14, 4, 53, 54,
	12, 10, 4, 53, 54, 16, 14, 4,
	55, 54, 12, 10, 4, 55, 54, 16,
	14, 4, 56, 54, 12, 10, 4, 56,
	54, 16, 14, 5, 1, 24, 25, 49,
	57, 5, 1, 24, 25, 55, 57, 5,
	1, 49, 54, 12, 10, 5, 1, 49,
	54, 16, 14, 5, 1, 51, 54, 12,
	10, 5, 1, 51, 54, 16, 14, 5,
	1, 53, 54, 12, 10, 5, 1, 53,
	54, 16, 14, 5, 1, 55, 54, 12,
	10, 5, 1, 55, 54, 16, 14, 5,
	11, 24, 25, 55, 57, 5, 13, 24,
	25, 55, 57, 5, 15, 24, 25, 55,
	57, 5, 17, 24, 25, 55, 57, 5,
	19, 24, 25, 55, 57, 5, 21, 24,
	25, 55, 57, 5, 23, 49, 54, 12,
	10, 5, 23, 55, 54, 12, 10, 5,
	24, 25, 49, 48, 26, 5, 24, 25,
	49, 48, 30, 5, 24, 25, 49, 48,
	34, 5, 24, 25, 49, 48, 38, 5,
	24, 25, 49, 50, 28, 5, 24, 25,
	49, 50, 32, 5, 24, 25, 49, 50,
	36, 5, 24, 25, 49, 50, 40, 5,
	24, 25, 49, 52, 42, 5, 24, 25,
	49, 52, 44, 5, 24, 25, 49, 52,
	46, 5, 24, 25, 49, 54, 18, 5,
	24, 25, 49, 54, 20, 5, 24, 25,
	55, 48, 26, 5, 24, 25, 55, 48,
	30, 5, 24, 25, 55, 48, 34, 5,
	24, 25, 55, 48, 38, 5, 24, 25,
	55, 50, 28, 5, 24, 25, 55, 50,
	32, 5, 24, 25, 55, 50, 36, 5,
	24, 25, 55, 50, 40, 5, 24, 25,
	55, 52, 42, 5, 24, 25, 55, 52,
	44, 5, 24, 25, 55, 52, 46, 5,
	24, 25, 55, 54, 18, 5, 24, 25,
	55, 54, 20, 5, 27, 24, 25, 49,
	57, 5, 29, 51, 54, 12, 10, 5,
	29, 51, 54, 16, 14, 5, 31, 24,
	25, 49, 57, 5, 33, 51, 54, 12,
	10, 5, 33, 51, 54, 16, 14, 5,
	35, 24, 25, 49, 57, 5, 37, 51,
	54, 12, 10, 5, 37, 51, 54, 16,
	14, 5, 39, 24, 25, 49, 57, 5,
	41, 51, 54, 12, 10, 5, 41, 51,
	54, 16, 14, 5, 43, 53, 54, 12,
	10, 5, 43, 53, 54, 16, 14, 5,
	45, 53, 54, 12, 10, 5, 45, 53,
	54, 16, 14, 5, 47, 53, 54, 12,
	10, 5, 47, 53, 54, 16, 14, 5,
	54, 12, 10, 16, 14, 6, 1, 24,
	25, 49, 48, 26, 6, 1, 24, 25,
	49, 48, 30, 6, 1, 24, 25, 49,
	48, 34, 6, 1, 24, 25, 49, 48,
	38, 6, 1, 24, 25, 49, 50, 28,
	6, 1, 24, 25, 49, 50, 32, 6,
	1, 24, 25, 49, 50, 36, 6, 1,
	24, 25, 49, 50, 40, 6, 1, 24,
	25, 49, 52, 42, 6, 1, 24, 25,
	49, 52, 44, 6, 1, 24, 25, 49,
	52, 46, 6, 1, 24, 25, 49, 54,
	18, 6, 1, 24, 25, 49, 54, 20,
	6, 1, 24, 25, 55, 48, 26, 6,
	1, 24, 25, 55, 48, 30, 6, 1,
	24, 25, 55, 48, 34, 6, 1, 24,
	25, 55, 48, 38, 6, 1, 24, 25,
	55, 50, 28, 6, 1, 24, 25, 55,
	50, 32, 6, 1, 24, 25, 55, 50,
	36, 6, 1, 24, 25, 55, 50, 40,
	6, 1, 24, 25, 55, 52, 42, 6,
	1, 24, 25, 55, 52, 44, 6, 1,
	24, 25, 55, 52, 46, 6, 1, 24,
	25, 55, 54, 18, 6, 1, 24, 25,
	55, 54, 20, 6, 1, 54, 12, 10,
	16, 14, 6, 11, 24, 25, 55, 48,
	26, 6, 11, 24, 25, 55, 48, 30,
	6, 11, 24, 25, 55, 48, 34, 6,
	11, 24, 25, 55, 48, 38, 6, 11,
	24, 25, 55, 50, 28, 6, 11, 24,
	25, 55, 50, 32, 6, 11, 24, 25,
	55, 50, 36, 6, 11, 24, 25, 55,
	50, 40, 6, 11, 24, 25, 55, 52,
	42, 6, 11, 24, 25, 55, 52, 44,
	6, 11, 24, 25, 55, 52, 46, 6,
	11, 24, 25, 55, 54, 18, 6, 11,
	24, 25, 55, 54, 20, 6, 13, 24,
	25, 55, 48, 26, 6, 13, 24, 25,
	55, 48, 30, 6, 13, 24, 25, 55,
	48, 34, 6, 13, 24, 25, 55, 48,
	38, 6, 13, 24, 25, 55, 50, 28,
	6, 13, 24, 25, 55, 50, 32, 6,
	13, 24, 25, 55, 50, 36, 6, 13,
	24, 25, 55, 50, 40, 6, 13, 24,
	25, 55, 52, 42, 6, 13, 24, 25,
	55, 52, 44, 6, 13, 24, 25, 55,
	52, 46, 6, 13, 24, 25, 55, 54,
	18, 6, 13, 24, 25, 55, 54, 20,
	6, 15, 24, 25, 55, 48, 26, 6,
	15, 24, 25, 55, 48, 30, 6, 15,
	24, 25, 55, 48, 34, 6, 15, 24,
	25, 55, 48, 38, 6, 15, 24, 25,
	55, 50, 28, 6, 15, 24, 25, 55,
	50, 32, 6, 15, 24, 25, 55, 50,
	36, 6, 15, 24, 25, 55, 50, 40,
	6, 15, 24, 25, 55, 52, 42, 6,
	15, 24, 25, 55, 52, 44, 6, 15,
	24, 25, 55, 52, 46, 6, 15, 24,
	25, 55, 54, 18, 6, 15, 24, 25,
	55, 54, 20, 6, 17, 24, 25, 55,
	48, 26, 6, 17, 24, 25, 55, 48,
	30, 6, 17, 24, 25, 55, 48, 34,
	6, 17, 24, 25, 55, 48, 38, 6,
	17, 24, 25, 55, 50, 28, 6, 17,
	24, 25, 55, 50, 32, 6, 17, 24,
	25, 55, 50, 36, 6, 17, 24, 25,
	55, 50, 40, 6, 17, 24, 25, 55,
	52, 42, 6, 17, 24, 25, 55, 52,
	44, 6, 17, 24, 25, 55, 52, 46,
	6, 17, 24, 25, 55, 54, 18, 6,
	17, 24, 25, 55, 54, 20, 6, 19,
	24, 25, 55, 48, 26, 6, 19, 24,
	25, 55, 48, 30, 6, 19, 24, 25,
	55, 48, 34, 6, 19, 24, 25, 55,
	48, 38, 6, 19, 24, 25, 55, 50,
	28, 6, 19, 24, 25, 55, 50, 32,
	6, 19, 24, 25, 55, 50, 36, 6,
	19, 24, 25, 55, 50, 40, 6, 19,
	24, 25, 55, 52, 42, 6, 19, 24,
	25, 55, 52, 44, 6, 19, 24, 25,
	55, 52, 46, 6, 19, 24, 25, 55,
	54, 18, 6, 19, 24, 25, 55, 54,
	20, 6, 21, 24, 25, 55, 48, 26,
	6, 21, 24, 25, 55, 48, 30, 6,
	21, 24, 25, 55, 48, 34, 6, 21,
	24, 25, 55, 48, 38, 6, 21, 24,
	25, 55, 50, 28, 6, 21, 24, 25,
	55, 50, 32, 6, 21, 24, 25, 55,
	50, 36, 6, 21, 24, 25, 55, 50,
	40, 6, 21, 24, 25, 55, 52, 42,
	6, 21, 24, 25, 55, 52, 44, 6,
	21, 24, 25, 55, 52, 46, 6, 21,
	24, 25, 55, 54, 18, 6, 21, 24,
	25, 55, 54, 20, 6, 24, 25, 49,
	54, 12, 10, 6, 24, 25, 49, 54,
	16, 14, 6, 24, 25, 55, 54, 12,
	10, 6, 24, 25, 55, 54, 16, 14,
	6, 27, 24, 25, 49, 48, 26, 6,
	27, 24, 25, 49, 48, 30, 6, 27,
	24, 25, 49, 48, 34, 6, 27, 24,
	25, 49, 48, 38, 6, 27, 24, 25,
	49, 50, 28, 6, 27, 24, 25, 49,
	50, 32, 6, 27, 24, 25, 49, 50,
	36, 6, 27, 24, 25, 49, 50, 40,
	6, 27, 24, 25, 49, 52, 42, 6,
	27, 24, 25, 49, 52, 44, 6, 27,
	24, 25, 49, 52, 46, 6, 27, 24,
	25, 49, 54, 18, 6, 27, 24, 25,
	49, 54, 20, 6, 31, 24, 25, 49,
	48, 26, 6, 31, 24, 25, 49, 48,
	30, 6, 31, 24, 25, 49, 48, 34,
	6, 31, 24, 25, 49, 48, 38, 6,
	31, 24, 25, 49, 50, 28, 6, 31,
	24, 25, 49, 50, 32, 6, 31, 24,
	25, 49, 50, 36, 6, 31, 24, 25,
	49, 50, 40, 6, 31, 24, 25, 49,
	52, 42, 6, 31, 24, 25, 49, 52,
	44, 6, 31, 24, 25, 49, 52, 46,
	6, 31, 24, 25, 49, 54, 18, 6,
	31, 24, 25, 49, 54, 20, 6, 35,
	24, 25, 49, 48, 26, 6, 35, 24,
	25, 49, 48, 30, 6, 35, 24, 25,
	49, 48, 34, 6, 35, 24, 25, 49,
	48, 38, 6, 35, 24, 25, 49, 50,
	28, 6, 35, 24, 25, 49, 50, 32,
	6, 35, 24, 25, 49, 50, 36, 6,
	35, 24, 25, 49, 50, 40, 6, 35,
	24, 25, 49, 52, 42, 6, 35, 24,
	25, 49, 52, 44, 6, 35, 24, 25,
	49, 52, 46, 6, 35, 24, 25, 49,
	54, 18, 6, 35, 24, 25, 49, 54,
	20, 6, 39, 24, 25, 49, 48, 26,
	6, 39, 24, 25, 49, 48, 30, 6,
	39, 24, 25, 49, 48, 34, 6, 39,
	24, 25, 49, 48, 38, 6, 39, 24,
	25, 49, 50, 28, 6, 39, 24, 25,
	49, 50, 32, 6, 39, 24, 25, 49,
	50, 36, 6, 39, 24, 25, 49, 50,
	40, 6, 39, 24, 25, 49, 52, 42,
	6, 39, 24, 25, 49, 52, 44, 6,
	39, 24, 25, 49, 52, 46, 6, 39,
	24, 25, 49, 54, 18, 6, 39, 24,
	25, 49, 54, 20, 6, 49, 54, 12,
	10, 16, 14, 6, 51, 54, 12, 10,
	16, 14, 6, 53, 54, 12, 10, 16,
	14, 6, 55, 54, 12, 10, 16, 14,
	6, 56, 54, 12, 10, 16, 14, 7,
	1, 24, 25, 49, 54, 12, 10, 7,
	1, 24, 25, 49, 54, 16, 14, 7,
	1, 24, 25, 55, 54, 12, 10, 7,
	1, 24, 25, 55, 54, 16, 14, 7,
	1, 49, 54, 12, 10, 16, 14, 7,
	1, 51, 54, 12, 10, 16, 14, 7,
	1, 53, 54, 12, 10, 16, 14, 7,
	1, 55, 54, 12, 10, 16, 14, 7,
	11, 24, 25, 55, 54, 12, 10, 7,
	11, 24, 25, 55, 54, 16, 14, 7,
	13, 24, 25, 55, 54, 12, 10, 7,
	13, 24, 25, 55, 54, 16, 14, 7,
	17, 24, 25, 55, 54, 12, 10, 7,
	19, 24, 25, 55, 54, 12, 10, 7,
	19, 24, 25, 55, 54, 16, 14, 7,
	21, 24, 25, 55, 54, 12, 10, 7,
	21, 24, 25, 55, 54, 16, 14, 7,
	27, 24, 25, 49, 54, 12, 10, 7,
	27, 24, 25, 49, 54, 16, 14, 7,
	29, 51, 54, 12, 10, 16, 14, 7,
	31, 24, 25, 49, 54, 12, 10, 7,
	31, 24, 25, 49, 54, 16, 14, 7,
	33, 51, 54, 12, 10, 16, 14, 7,
	35, 24, 25, 49, 54, 12, 10, 7,
	35, 24, 25, 49, 54, 16, 14, 7,
	37, 51, 54, 12, 10, 16, 14, 7,
	39, 24, 25, 49, 54, 12, 10, 7,
	39, 24, 25, 49, 54, 16, 14, 7,
	41, 51, 54, 12, 10, 16, 14, 7,
	43, 53, 54, 12, 10, 16, 14, 7,
	45, 53, 54, 12, 10, 16, 14, 7,
	47, 53, 54, 12, 10, 16, 14, 8,
	24, 25, 49, 54, 12, 10, 16, 14,
	8, 24, 25, 55, 54, 12, 10, 16,
	14, 9, 1, 24, 25, 49, 54, 12,
	10, 16, 14, 9, 1, 24, 25, 55,
	54, 12, 10, 16, 14, 9, 11, 24,
	25, 55, 54, 12, 10, 16, 14, 9,
	19, 24, 25, 55, 54, 12, 10, 16,
	14, 9, 21, 24, 25, 55, 54, 12,
	10, 16, 14, 9, 27, 24, 25, 49,
	54, 12, 10, 16, 14, 9, 31, 24,
	25, 49, 54, 12, 10, 16, 14, 9,
	35, 24, 25, 49, 54, 12, 10, 16,
	14, 9, 39, 24, 25, 49, 54, 12,
	10, 16, 14,
}

var _JDR_key_offsets []int16 = []int16{
	0, 0, 14, 28, 31, 33, 41, 49,
	57, 68, 79, 81, 92, 94, 96, 107,
	109, 111, 113, 124, 132, 140, 142, 150,
	154, 163, 169, 175, 181, 187, 189, 203,
	205, 207, 221, 223, 225, 227, 241, 267,
	293, 319, 346, 373, 400, 427, 454, 481,
	507, 533, 559, 585, 611, 637, 667, 695,
	721, 750, 776, 802, 831, 858, 884, 910,
	935, 961, 987, 1014, 1039, 1065, 1091, 1117,
	1144, 1171, 1197, 1222, 1247, 1274, 1300, 1326,
	1352,
}

var _JDR_trans_keys []byte = []byte{
	10, 13, 34, 92, 128, 191, 192, 223,
	224, 239, 240, 247, 248, 255, 10, 13,
	34, 92, 128, 191, 192, 223, 224, 239,
	240, 247, 248, 255, 48, 49, 57, 48,
	57, 95, 126, 48, 57, 65, 90, 97,
	122, 95, 126, 48, 57, 65, 90, 97,
	122, 95, 126, 48, 57, 65, 90, 97,
	122, 96, 128, 191, 192, 223, 224, 239,
	240, 247, 248, 255, 96, 128, 191, 192,
	223, 224, 239, 240, 247, 248, 255, 128,
	191, 96, 128, 191, 192, 223, 224, 239,
	240, 247, 248, 255, 128, 191, 128, 191,
	96, 128, 191, 192, 223, 224, 239, 240,
	247, 248, 255, 128, 191, 128, 191, 128,
	191, 96, 128, 191, 192, 223, 224, 239,
	240, 247, 248, 255, 95, 126, 48, 57,
	65, 90, 97, 122, 95, 126, 48, 57,
	65, 90, 97, 122, 48, 57, 95, 126,
	48, 57, 65, 90, 97, 122, 43, 45,
	48, 57, 34, 47, 92, 98, 102, 110,
	114, 116, 117, 48, 57, 65, 90, 97,
	102, 48, 57, 65, 90, 97, 102, 48,
	57, 65, 90, 97, 102, 48, 57, 65,
	90, 97, 102, 128, 191, 10, 13, 34,
	92, 128, 191, 192, 223, 224, 239, 240,
	247, 248, 255, 128, 191, 128, 191, 10,
	13, 34, 92, 128, 191, 192, 223, 224,
	239, 240, 247, 248, 255, 128, 191, 128,
	191, 128, 191, 10, 13, 34, 92, 128,
	191, 192, 223, 224, 239, 240, 247, 248,
	255, 9, 10, 13, 32, 34, 40, 41,
	44, 45, 48, 58, 59, 60, 62, 91,
	93, 96, 123, 125, 126, 49, 57, 65,
	90, 95, 122, 9, 10, 13, 32, 34,
	40, 41, 44, 45, 48, 58, 59, 60,
	62, 91, 93, 96, 123, 125, 126, 49,
	57, 65, 90, 95, 122, 9, 10, 13,
	32, 34, 40, 41, 44, 45, 48, 58,
	59, 60, 62, 91, 93, 96, 123, 125,
	126, 49, 57, 65, 90, 95, 122, 9,
	10, 13, 32, 34, 40, 41, 44, 45,
	48, 58, 59, 60, 62, 64, 91, 93,
	96, 123, 125, 126, 49, 57, 65, 90,
	95, 122, 9, 10, 13, 32, 34, 40,
	41, 44, 45, 48, 58, 59, 60, 62,
	64, 91, 93, 96, 123, 125, 126, 49,
	57, 65, 90, 95, 122, 9, 10, 13,
	32, 34, 40, 41, 44, 45, 48, 58,
	59, 60, 62, 64, 91, 93, 96, 123,
	125, 126, 49, 57, 65, 90, 95, 122,
	9, 10, 13, 32, 34, 40, 41, 44,
	45, 48, 58, 59, 60, 62, 64, 91,
	93, 96, 123, 125, 126, 49, 57, 65,
	90, 95, 122, 9, 10, 13, 32, 34,
	40, 41, 44, 45, 48, 58, 59, 60,
	62, 64, 91, 93, 96, 123, 125, 126,
	49, 57, 65, 90, 95, 122, 9, 10,
	13, 32, 34, 40, 41, 44, 45, 48,
	58, 59, 60, 62, 64, 91, 93, 96,
	123, 125, 126, 49, 57, 65, 90, 95,
	122, 9, 10, 13, 32, 34, 40, 41,
	44, 45, 48, 58, 59, 60, 62, 91,
	93, 96, 123, 125, 126, 49, 57, 65,
	90, 95, 122, 9, 10, 13, 32, 34,
	40, 41, 44, 45, 48, 58, 59, 60,
	62, 91, 93, 96, 123, 125, 126, 49,
	57, 65, 90, 95, 122, 9, 10, 13,
	32, 34, 40, 41, 44, 45, 48, 58,
	59, 60, 62, 91, 93, 96, 123, 125,
	126, 49, 57, 65, 90, 95, 122, 9,
	10, 13, 32, 34, 40, 41, 44, 45,
	48, 58, 59, 60, 62, 91, 93, 96,
	123, 125, 126, 49, 57, 65, 90, 95,
	122, 9, 10, 13, 32, 34, 40, 41,
	44, 45, 48, 58, 59, 60, 62, 91,
	93, 96, 123, 125, 126, 49, 57, 65,
	90, 95, 122, 9, 10, 13, 32, 34,
	40, 41, 44, 45, 48, 58, 59, 60,
	62, 91, 93, 96, 123, 125, 126, 49,
	57, 65, 90, 95, 122, 9, 10, 13,
	32, 34, 40, 41, 44, 45, 46, 48,
	58, 59, 60, 62, 64, 69, 91, 93,
	96, 101, 123, 125, 126, 49, 57, 65,
	90, 95, 122, 9, 10, 13, 32, 34,
	40, 41, 44, 45, 58, 59, 60, 62,
	64, 69, 91, 93, 96, 101, 123, 125,
	126, 48, 57, 65, 90, 95, 122, 9,
	10, 13, 32, 34, 40, 41, 44, 45,
	48, 58, 59, 60, 62, 91, 93, 96,
	123, 125, 126, 49, 57, 65, 90, 95,
	122, 9, 10, 13, 32, 34, 40, 41,
	44, 45, 46, 58, 59, 60, 62, 64,
	69, 91, 93, 96, 101, 123, 125, 126,
	48, 57, 65, 90, 95, 122, 9, 10,
	13, 32, 34, 40, 41, 44, 45, 58,
	59, 60, 62, 64, 91, 93, 96, 123,
	125, 126, 48, 57, 65, 90, 95, 122,
	9, 10, 13, 32, 34, 40, 41, 44,
	45, 48, 58, 59, 60, 62, 91, 93,
	96, 123, 125, 126, 49, 57, 65, 90,
	95, 122, 9, 10, 13, 32, 34, 40,
	41, 44, 45, 46, 58, 59, 60, 62,
	64, 69, 91, 93, 96, 101, 123, 125,
	126, 48, 57, 65, 90, 95, 122, 9,
	10, 13, 32, 34, 40, 41, 44, 45,
	48, 58, 59, 60, 62, 64, 91, 93,
	96, 123, 125, 126, 49, 57, 65, 90,
	95, 122, 9, 10, 13, 32, 34, 40,
	41, 44, 45, 48, 58, 59, 60, 62,
	91, 93, 96, 123, 125, 126, 49, 57,
	65, 90, 95, 122, 9, 10, 13, 32,
	34, 40, 41, 44, 45, 58, 59, 60,
	62, 64, 91, 93, 96, 123, 125, 126,
	48, 57, 65, 90, 95, 122, 9, 10,
	13, 32, 34, 40, 41, 44, 45, 58,
	59, 60, 62, 91, 93, 96, 123, 125,
	126, 48, 57, 65, 90, 95, 122, 9,
	10, 13, 32, 34, 40, 41, 44, 45,
	48, 58, 59, 60, 62, 91, 93, 96,
	123, 125, 126, 49, 57, 65, 90, 95,
	122, 9, 10, 13, 32, 34, 40, 41,
	44, 45, 48, 58, 59, 60, 62, 91,
	93, 96, 123, 125, 126, 49, 57, 65,
	90, 95, 122, 9, 10, 13, 32, 34,
	40, 41, 44, 45, 48, 58, 59, 60,
	62, 64, 91, 93, 96, 123, 125, 126,
	49, 57, 65, 90, 95, 122, 9, 10,
	13, 32, 34, 40, 41, 44, 45, 58,
	59, 60, 62, 91, 93, 96, 123, 125,
	126, 48, 57, 65, 90, 95, 122, 9,
	10, 13, 32, 34, 40, 41, 44, 45,
	48, 58, 59, 60, 62, 91, 93, 96,
	123, 125, 126, 49, 57, 65, 90, 95,
	122, 9, 10, 13, 32, 34, 40, 41,
	44, 45, 48, 58, 59, 60, 62, 91,
	93, 96, 123, 125, 126, 49, 57, 65,
	90, 95, 122, 9, 10, 13, 32, 34,
	40, 41, 44, 45, 48, 58, 59, 60,
	62, 91, 93, 96, 123, 125, 126, 49,
	57, 65, 90, 95, 122, 9, 10, 13,
	32, 34, 40, 41, 44, 45, 48, 58,
	59, 60, 62, 64, 91, 93, 96, 123,
	125, 126, 49, 57, 65, 90, 95, 122,
	9, 10, 13, 32, 34, 40, 41, 44,
	45, 48, 58, 59, 60, 62, 64, 91,
	93, 96, 123, 125, 126, 49, 57, 65,
	90, 95, 122, 9, 10, 13, 32, 34,
	40, 41, 44, 45, 48, 58, 59, 60,
	62, 91, 93, 96, 123, 125, 126, 49,
	57, 65, 90, 95, 122, 9, 10, 13,
	32, 34, 40, 41, 44, 45, 58, 59,
	60, 62, 91, 93, 96, 123, 125, 126,
	48, 57, 65, 90, 95, 122, 9, 10,
	13, 32, 34, 40, 41, 44, 45, 58,
	59, 60, 62, 91, 93, 96, 123, 125,
	126, 48, 57, 65, 90, 95, 122, 9,
	10, 13, 32, 34, 40, 41, 43, 44,
	45, 58, 59, 60, 62, 64, 91, 93,
	96, 123, 125, 126, 48, 57, 65, 90,
	95, 122, 9, 10, 13, 32, 34, 40,
	41, 44, 45, 58, 59, 60, 62, 64,
	91, 93, 96, 123, 125, 126, 48, 57,
	65, 90, 95, 122, 9, 10, 13, 32,
	34, 40, 41, 44, 45, 58, 59, 60,
	62, 64, 91, 93, 96, 123, 125, 126,
	48, 57, 65, 90, 95, 122, 9, 10,
	13, 32, 34, 40, 41, 44, 45, 58,
	59, 60, 62, 64, 91, 93, 96, 123,
	125, 126, 48, 57, 65, 90, 95, 122,
	9, 10, 13, 32, 34, 40, 41, 44,
	45, 46, 58, 59, 60, 62, 64, 69,
	91, 93, 96, 101, 123, 125, 126, 48,
	57, 65, 90, 95, 122,
}

var _JDR_single_lengths []byte = []byte{
	0, 4, 4, 1, 0, 2, 2, 2,
	1, 1, 0, 1, 0, 0, 1, 0,
	0, 0, 1, 2, 2, 0, 2, 2,
	9, 0, 0, 0, 0, 0, 4, 0,
	0, 4, 0, 0, 0, 4, 20, 20,
	20, 21, 21, 21, 21, 21, 21, 20,
	20, 20, 20, 20, 20, 24, 22, 20,
	23, 20, 20, 23, 21, 20, 20, 19,
	20, 20, 21, 19, 20, 20, 20, 21,
	21, 20, 19, 19, 21, 20, 20, 20,
	23,
}

var _JDR_range_lengths []byte = []byte{
	0, 5, 5, 1, 1, 3, 3, 3,
	5, 5, 1, 5, 1, 1, 5, 1,
	1, 1, 5, 3, 3, 1, 3, 1,
	0, 3, 3, 3, 3, 1, 5, 1,
	1, 5, 1, 1, 1, 5, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3,
	3,
}

var _JDR_index_offsets []int16 = []int16{
	0, 0, 10, 20, 23, 25, 31, 37,
	43, 50, 57, 59, 66, 68, 70, 77,
	79, 81, 83, 90, 96, 102, 104, 110,
	114, 124, 128, 132, 136, 140, 142, 152,
	154, 156, 166, 168, 170, 172, 182, 206,
	230, 254, 279, 304, 329, 354, 379, 404,
	428, 452, 476, 500, 524, 548, 576, 602,
	626, 653, 677, 701, 728, 753, 777, 801,
	824, 848, 872, 897, 920, 944, 968, 992,
	1017, 1042, 1066, 1089, 1112, 1137, 1161, 1185,
	1209,
}

var _JDR_trans_targs []byte = []byte{
	0, 0, 41, 24, 0, 29, 31, 34,
	0, 2, 0, 0, 41, 24, 0, 29,
	31, 34, 0, 2, 53, 80, 0, 54,
	0, 57, 57, 57, 57, 57, 0, 63,
	63, 63, 63, 63, 0, 67, 67, 67,
	67, 67, 0, 71, 0, 10, 12, 15,
	0, 9, 71, 0, 10, 12, 15, 0,
	9, 11, 0, 71, 0, 10, 12, 15,
	0, 9, 13, 0, 14, 0, 71, 0,
	10, 12, 15, 0, 9, 16, 0, 17,
	0, 18, 0, 71, 0, 10, 12, 15,
	0, 9, 74, 74, 74, 74, 74, 0,
	75, 75, 75, 75, 75, 0, 77, 0,
	57, 57, 78, 57, 57, 0, 21, 21,
	77, 0, 1, 1, 1, 1, 1, 1,
	1, 1, 25, 0, 26, 26, 26, 0,
	27, 27, 27, 0, 28, 28, 28, 0,
	1, 1, 1, 0, 30, 0, 0, 0,
	41, 24, 0, 29, 31, 34, 0, 2,
	32, 0, 33, 0, 0, 0, 41, 24,
	0, 29, 31, 34, 0, 2, 35, 0,
	36, 0, 37, 0, 0, 0, 41, 24,
	0, 29, 31, 34, 0, 2, 39, 40,
	39, 39, 1, 44, 47, 50, 3, 56,
	55, 58, 60, 61, 66, 70, 8, 72,
	73, 62, 59, 62, 62, 0, 39, 40,
	39, 39, 1, 44, 47, 50, 3, 56,
	55, 58, 60, 61, 66, 70, 8, 72,
	73, 62, 59, 62, 62, 0, 39, 40,
	39, 39, 1, 44, 47, 50, 3, 56,
	55, 58, 60, 61, 66, 70, 8, 72,
	73, 62, 59, 62, 62, 0, 42, 43,
	42, 42, 1, 44, 47, 50, 3, 56,
	55, 58, 60, 61, 6, 66, 70, 8,
	72, 73, 62, 59, 62, 62, 0, 42,
	43, 42, 42, 1, 44, 47, 50, 3,
	56, 55, 58, 60, 61, 6, 66, 70,
	8, 72, 73, 62, 59, 62, 62, 0,
	42, 43, 42, 42, 1, 44, 47, 50,
	3, 56, 55, 58, 60, 61, 6, 66,
	70, 8, 72, 73, 62, 59, 62, 62,
	0, 45, 46, 45, 45, 1, 44, 47,
	50, 3, 56, 55, 58, 60, 61, 7,
	66, 70, 8, 72, 73, 62, 59, 62,
	62, 0, 45, 46, 45, 45, 1, 44,
	47, 50, 3, 56, 55, 58, 60, 61,
	7, 66, 70, 8, 72, 73, 62, 59,
	62, 62, 0, 45, 46, 45, 45, 1,
	44, 47, 50, 3, 56, 55, 58, 60,
	61, 7, 66, 70, 8, 72, 73, 62,
	59, 62, 62, 0, 48, 49, 48, 48,
	1, 44, 47, 50, 3, 56, 55, 58,
	60, 61, 66, 70, 8, 72, 73, 62,
	59, 62, 62, 0, 48, 49, 48, 48,
	1, 44, 47, 50, 3, 56, 55, 58,
	60, 61, 66, 70, 8, 72, 73, 62,
	59, 62, 62, 0, 48, 49, 48, 48,
	1, 44, 47, 50, 3, 56, 55, 58,
	60, 61, 66, 70, 8, 72, 73, 62,
	59, 62, 62, 0, 51, 52, 51, 51,
	1, 44, 47, 50, 3, 56, 55, 58,
	60, 61, 66, 70, 8, 72, 73, 62,
	59, 62, 62, 0, 51, 52, 51, 51,
	1, 44, 47, 50, 3, 56, 55, 58,
	60, 61, 66, 70, 8, 72, 73, 62,
	59, 62, 62, 0, 51, 52, 51, 51,
	1, 44, 47, 50, 3, 56, 55, 58,
	60, 61, 66, 70, 8, 72, 73, 62,
	59, 62, 62, 0, 42, 43, 42, 42,
	1, 44, 47, 50, 3, 4, 56, 55,
	58, 60, 61, 6, 23, 66, 70, 8,
	23, 72, 73, 62, 59, 62, 62, 0,
	42, 43, 42, 42, 1, 44, 47, 50,
	3, 55, 58, 60, 61, 6, 23, 66,
	70, 8, 23, 72, 73, 62, 54, 62,
	62, 0, 51, 52, 51, 51, 1, 44,
	47, 50, 3, 56, 55, 58, 60, 61,
	66, 70, 8, 72, 73, 62, 59, 62,
	62, 0, 42, 43, 42, 42, 1, 44,
	47, 50, 5, 4, 55, 58, 60, 61,
	6, 76, 66, 70, 8, 76, 72, 73,
	62, 62, 62, 62, 0, 42, 43, 42,
	42, 1, 44, 47, 50, 3, 55, 58,
	60, 61, 6, 66, 70, 8, 72, 73,
	57, 57, 57, 57, 0, 51, 52, 51,
	51, 1, 44, 47, 50, 3, 56, 55,
	58, 60, 61, 66, 70, 8, 72, 73,
	62, 59, 62, 62, 0, 42, 43, 42,
	42, 1, 44, 47, 50, 5, 4, 55,
	58, 60, 61, 6, 76, 66, 70, 8,
	76, 72, 73, 62, 59, 62, 62, 0,
	45, 46, 45, 45, 1, 44, 47, 50,
	3, 56, 55, 58, 60, 61, 7, 66,
	70, 8, 72, 73, 62, 59, 62, 62,
	0, 48, 49, 48, 48, 1, 44, 47,
	50, 3, 56, 55, 58, 60, 61, 66,
	70, 8, 72, 73, 62, 59, 62, 62,
	0, 42, 43, 42, 42, 1, 44, 47,
	50, 5, 55, 58, 60, 61, 6, 66,
	70, 8, 72, 73, 62, 62, 62, 62,
	0, 64, 65, 64, 64, 1, 44, 47,
	50, 20, 55, 58, 60, 61, 66, 70,
	8, 72, 73, 63, 63, 63, 63, 0,
	64, 65, 64, 64, 1, 44, 47, 50,
	3, 56, 55, 58, 60, 61, 66, 70,
	8, 72, 73, 62, 59, 62, 62, 0,
	64, 65, 64, 64, 1, 44, 47, 50,
	3, 56, 55, 58, 60, 61, 66, 70,
	8, 72, 73, 62, 59, 62, 62, 0,
	45, 46, 45, 45, 1, 44, 47, 50,
	3, 56, 55, 58, 60, 61, 7, 66,
	70, 8, 72, 73, 62, 59, 62, 62,
	0, 68, 69, 68, 68, 1, 44, 47,
	50, 19, 55, 58, 60, 61, 66, 70,
	8, 72, 73, 67, 67, 67, 67, 0,
	68, 69, 68, 68, 1, 44, 47, 50,
	3, 56, 55, 58, 60, 61, 66, 70,
	8, 72, 73, 62, 59, 62, 62, 0,
	68, 69, 68, 68, 1, 44, 47, 50,
	3, 56, 55, 58, 60, 61, 66, 70,
	8, 72, 73, 62, 59, 62, 62, 0,
	48, 49, 48, 48, 1, 44, 47, 50,
	3, 56, 55, 58, 60, 61, 66, 70,
	8, 72, 73, 62, 59, 62, 62, 0,
	42, 43, 42, 42, 1, 44, 47, 50,
	3, 56, 55, 58, 60, 61, 6, 66,
	70, 8, 72, 73, 62, 59, 62, 62,
	0, 45, 46, 45, 45, 1, 44, 47,
	50, 3, 56, 55, 58, 60, 61, 7,
	66, 70, 8, 72, 73, 62, 59, 62,
	62, 0, 48, 49, 48, 48, 1, 44,
	47, 50, 3, 56, 55, 58, 60, 61,
	66, 70, 8, 72, 73, 62, 59, 62,
	62, 0, 68, 69, 68, 68, 1, 44,
	47, 50, 3, 55, 58, 60, 61, 66,
	70, 8, 72, 73, 74, 74, 74, 74,
	0, 64, 65, 64, 64, 1, 44, 47,
	50, 3, 55, 58, 60, 61, 66, 70,
	8, 72, 73, 75, 75, 75, 75, 0,
	42, 43, 42, 42, 1, 44, 47, 21,
	50, 22, 55, 58, 60, 61, 6, 66,
	70, 8, 72, 73, 62, 79, 62, 62,
	0, 42, 43, 42, 42, 1, 44, 47,
	50, 3, 55, 58, 60, 61, 6, 66,
	70, 8, 72, 73, 62, 77, 62, 62,
	0, 42, 43, 42, 42, 1, 44, 47,
	50, 3, 55, 58, 60, 61, 6, 66,
	70, 8, 72, 73, 57, 78, 57, 57,
	0, 42, 43, 42, 42, 1, 44, 47,
	50, 5, 55, 58, 60, 61, 6, 66,
	70, 8, 72, 73, 62, 79, 62, 62,
	0, 42, 43, 42, 42, 1, 44, 47,
	50, 3, 4, 55, 58, 60, 61, 6,
	23, 66, 70, 8, 23, 72, 73, 62,
	80, 62, 62, 0,
}

var _JDR_trans_actions []int16 = []int16{
	0, 0, 0, 0, 0, 9, 13, 17,
	0, 5, 0, 0, 7, 7, 0, 75,
	78, 81, 0, 72, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 9, 13, 17,
	0, 5, 7, 0, 75, 78, 81, 0,
	72, 0, 0, 11, 0, 87, 90, 93,
	0, 84, 0, 0, 0, 0, 15, 0,
	99, 102, 105, 0, 96, 0, 0, 0,
	0, 0, 0, 19, 0, 111, 114, 117,
	0, 108, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0,
	11, 11, 0, 87, 90, 93, 0, 84,
	0, 0, 0, 0, 0, 0, 15, 15,
	0, 99, 102, 105, 0, 96, 0, 0,
	0, 0, 0, 0, 0, 0, 19, 19,
	0, 111, 114, 117, 0, 108, 59, 255,
	59, 59, 625, 581, 597, 613, 1538, 3081,
	617, 621, 593, 609, 585, 601, 629, 589,
	605, 1543, 3081, 1543, 1543, 0, 0, 1,
	0, 0, 246, 204, 219, 234, 521, 1920,
	237, 240, 213, 228, 207, 222, 249, 210,
	225, 525, 1920, 525, 525, 0, 3, 63,
	3, 3, 317, 261, 281, 301, 828, 2108,
	305, 309, 273, 293, 265, 285, 321, 269,
	289, 833, 2108, 833, 833, 0, 29, 144,
	29, 29, 2556, 2479, 2507, 2535, 3192, 3392,
	2542, 2549, 2500, 2528, 147, 2486, 2514, 2563,
	2493, 2521, 3200, 3392, 3200, 3200, 0, 0,
	1, 0, 0, 1800, 1734, 1758, 1782, 2675,
	3353, 1788, 1794, 1752, 1776, 33, 1740, 1764,
	1806, 1746, 1770, 2682, 3353, 2682, 2682, 0,
	3, 63, 3, 3, 2094, 2017, 2045, 2073,
	3104, 3372, 2080, 2087, 2038, 2066, 66, 2024,
	2052, 2101, 2031, 2059, 3112, 3372, 3112, 3112,
	0, 37, 159, 37, 37, 2766, 2689, 2717,
	2745, 3224, 3412, 2752, 2759, 2710, 2738, 162,
	2696, 2724, 2773, 2703, 2731, 3232, 3412, 3232,
	3232, 0, 0, 1, 0, 0, 1722, 1656,
	1680, 1704, 2661, 3344, 1710, 1716, 1674, 1698,
	33, 1662, 1686, 1728, 1668, 1692, 2668, 3344,
	2668, 2668, 0, 3, 63, 3, 3, 2003,
	1926, 1954, 1982, 3088, 3362, 1989, 1996, 1947,
	1975, 66, 1933, 1961, 2010, 1940, 1968, 3096,
	3362, 3096, 3096, 0, 39, 165, 39, 39,
	1098, 1043, 1063, 1083, 1818, 3240, 1088, 1093,
	1058, 1078, 1048, 1068, 1103, 1053, 1073, 1824,
	3240, 1824, 1824, 0, 0, 1, 0, 0,
	461, 417, 433, 449, 1508, 3060, 453, 457,
	429, 445, 421, 437, 465, 425, 441, 1513,
	3060, 1513, 1513, 0, 3, 63, 3, 3,
	753, 698, 718, 738, 1572, 3128, 743, 748,
	713, 733, 703, 723, 758, 708, 728, 1578,
	3128, 1578, 1578, 0, 53, 195, 53, 53,
	1358, 1303, 1323, 1343, 1884, 3320, 1348, 1353,
	1318, 1338, 1308, 1328, 1363, 1313, 1333, 1890,
	3320, 1890, 1890, 0, 0, 1, 0, 0,
	513, 469, 485, 501, 1518, 3067, 505, 509,
	481, 497, 473, 489, 517, 477, 493, 1523,
	3067, 1523, 1523, 0, 3, 63, 3, 3,
	818, 763, 783, 803, 1584, 3136, 808, 813,
	778, 798, 768, 788, 823, 773, 793, 1590,
	3136, 1590, 1590, 0, 21, 120, 21, 21,
	2192, 2115, 2143, 2171, 3152, 0, 3382, 2178,
	2185, 2136, 2164, 123, 0, 2122, 2150, 2199,
	0, 2129, 2157, 3160, 3382, 3160, 3160, 0,
	23, 126, 23, 23, 2283, 2206, 2234, 2262,
	3168, 2269, 2276, 2227, 2255, 129, 0, 2213,
	2241, 2290, 0, 2220, 2248, 3176, 0, 3176,
	3176, 0, 55, 198, 55, 55, 1423, 1368,
	1388, 1408, 1896, 3328, 1413, 1418, 1383, 1403,
	1373, 1393, 1428, 1378, 1398, 1902, 3328, 1902,
	1902, 0, 21, 120, 21, 21, 2192, 2115,
	2143, 2171, 0, 0, 2178, 2185, 2136, 2164,
	123, 0, 2122, 2150, 2199, 0, 2129, 2157,
	0, 0, 0, 0, 0, 27, 138, 27,
	27, 2465, 2388, 2416, 2444, 3184, 2451, 2458,
	2409, 2437, 141, 2395, 2423, 2472, 2402, 2430,
	0, 0, 0, 0, 0, 57, 201, 57,
	57, 1488, 1433, 1453, 1473, 1908, 3336, 1478,
	1483, 1448, 1468, 1438, 1458, 1493, 1443, 1463,
	1914, 3336, 1914, 1914, 0, 21, 120, 21,
	21, 2192, 2115, 2143, 2171, 0, 0, 2178,
	2185, 2136, 2164, 123, 0, 2122, 2150, 2199,
	0, 2129, 2157, 0, 0, 0, 0, 0,
	49, 186, 49, 49, 3039, 2962, 2990, 3018,
	3296, 3442, 3025, 3032, 2983, 3011, 189, 2969,
	2997, 3046, 2976, 3004, 3304, 3442, 3304, 3304,
	0, 51, 192, 51, 51, 1293, 1238, 1258,
	1278, 1872, 3312, 1283, 1288, 1253, 1273, 1243,
	1263, 1298, 1248, 1268, 1878, 3312, 1878, 1878,
	0, 25, 132, 25, 25, 2374, 2297, 2325,
	2353, 0, 2360, 2367, 2318, 2346, 135, 2304,
	2332, 2381, 2311, 2339, 0, 0, 0, 0,
	0, 35, 156, 35, 35, 1023, 968, 988,
	1008, 0, 1013, 1018, 983, 1003, 973, 993,
	1028, 978, 998, 0, 0, 0, 0, 0,
	0, 1, 0, 0, 573, 529, 545, 561,
	1528, 3074, 565, 569, 541, 557, 533, 549,
	577, 537, 553, 1533, 3074, 1533, 1533, 0,
	3, 63, 3, 3, 893, 838, 858, 878,
	1596, 3144, 883, 888, 853, 873, 843, 863,
	898, 848, 868, 1602, 3144, 1602, 1602, 0,
	41, 168, 41, 41, 2857, 2780, 2808, 2836,
	3248, 3422, 2843, 2850, 2801, 2829, 171, 2787,
	2815, 2864, 2794, 2822, 3256, 3422, 3256, 3256,
	0, 35, 156, 35, 35, 958, 903, 923,
	943, 0, 948, 953, 918, 938, 908, 928,
	963, 913, 933, 0, 0, 0, 0, 0,
	0, 1, 0, 0, 409, 365, 381, 397,
	1498, 3053, 401, 405, 377, 393, 369, 385,
	413, 373, 389, 1503, 3053, 1503, 1503, 0,
	3, 63, 3, 3, 688, 633, 653, 673,
	1560, 3120, 678, 683, 648, 668, 638, 658,
	693, 643, 663, 1566, 3120, 1566, 1566, 0,
	43, 174, 43, 43, 1163, 1108, 1128, 1148,
	1836, 3264, 1153, 1158, 1123, 1143, 1113, 1133,
	1168, 1118, 1138, 1842, 3264, 1842, 1842, 0,
	31, 150, 31, 31, 2647, 2570, 2598, 2626,
	3208, 3402, 2633, 2640, 2591, 2619, 153, 2577,
	2605, 2654, 2584, 2612, 3216, 3402, 3216, 3216,
	0, 45, 177, 45, 45, 2948, 2871, 2899,
	2927, 3272, 3432, 2934, 2941, 2892, 2920, 180,
	2878, 2906, 2955, 2885, 2913, 3280, 3432, 3280,
	3280, 0, 47, 183, 47, 47, 1228, 1173,
	1193, 1213, 1854, 3288, 1218, 1223, 1188, 1208,
	1178, 1198, 1233, 1183, 1203, 1860, 3288, 1860,
	1860, 0, 35, 156, 35, 35, 958, 903,
	923, 943, 1644, 948, 953, 918, 938, 908,
	928, 963, 913, 933, 0, 0, 0, 0,
	0, 35, 156, 35, 35, 1023, 968, 988,
	1008, 1650, 1013, 1018, 983, 1003, 973, 993,
	1028, 978, 998, 0, 0, 0, 0, 0,
	25, 132, 25, 25, 2374, 2297, 2325, 0,
	2353, 0, 2360, 2367, 2318, 2346, 135, 2304,
	2332, 2381, 2311, 2339, 0, 0, 0, 0,
	0, 23, 126, 23, 23, 2283, 2206, 2234,
	2262, 3168, 2269, 2276, 2227, 2255, 129, 2213,
	2241, 2290, 2220, 2248, 3176, 0, 3176, 3176,
	0, 23, 126, 23, 23, 2283, 2206, 2234,
	2262, 3168, 2269, 2276, 2227, 2255, 129, 2213,
	2241, 2290, 2220, 2248, 0, 0, 0, 0,
	0, 23, 126, 23, 23, 2283, 2206, 2234,
	2262, 0, 2269, 2276, 2227, 2255, 129, 2213,
	2241, 2290, 2220, 2248, 0, 0, 0, 0,
	0, 21, 120, 21, 21, 2192, 2115, 2143,
	2171, 3152, 0, 2178, 2185, 2136, 2164, 123,
	0, 2122, 2150, 2199, 0, 2129, 2157, 3160,
	0, 3160, 3160, 0,
}

var _JDR_eof_actions []int16 = []int16{
	0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 258, 61,
	69, 1632, 1038, 1554, 1812, 1033, 1548, 337,
	231, 297, 353, 243, 313, 1608, 1614, 357,
	1608, 1626, 361, 1608, 1866, 349, 1620, 333,
	252, 325, 1830, 329, 216, 277, 341, 1638,
	1848, 345, 329, 333, 1620, 1614, 1614, 1614,
	1608,
}

const JDR_start int = 38
const JDR_first_final int = 38
const JDR_error int = 0

const JDR_en_main int = 38

// the public API function
//

func JDRlexer(state *JDRstate) (err error) {

	data := state.jdr
	var mark0 [64]int
	cs, p, pe, eof := 0, 0, len(data), len(data)

	{
		cs = JDR_start
	}

	{
		var _klen int
		var _trans int
		var _acts int
		var _nacts uint
		var _keys int
		if p == pe {
			goto _test_eof
		}
		if cs == 0 {
			goto _out
		}
	_resume:
		_keys = int(_JDR_key_offsets[cs])
		_trans = int(_JDR_index_offsets[cs])

		_klen = int(_JDR_single_lengths[cs])
		if _klen > 0 {
			_lower := int(_keys)
			var _mid int
			_upper := int(_keys + _klen - 1)
			for {
				if _upper < _lower {
					break
				}

				_mid = _lower + ((_upper - _lower) >> 1)
				switch {
				case data[p] < _JDR_trans_keys[_mid]:
					_upper = _mid - 1
				case data[p] > _JDR_trans_keys[_mid]:
					_lower = _mid + 1
				default:
					_trans += int(_mid - int(_keys))
					goto _match
				}
			}
			_keys += _klen
			_trans += _klen
		}

		_klen = int(_JDR_range_lengths[cs])
		if _klen > 0 {
			_lower := int(_keys)
			var _mid int
			_upper := int(_keys + (_klen << 1) - 2)
			for {
				if _upper < _lower {
					break
				}

				_mid = _lower + (((_upper - _lower) >> 1) & ^1)
				switch {
				case data[p] < _JDR_trans_keys[_mid]:
					_upper = _mid - 2
				case data[p] > _JDR_trans_keys[_mid+1]:
					_lower = _mid + 2
				default:
					_trans += int((_mid - int(_keys)) >> 1)
					goto _match
				}
			}
			_trans += _klen
		}

	_match:
		cs = int(_JDR_trans_targs[_trans])

		if _JDR_trans_actions[_trans] == 0 {
			goto _again
		}

		_acts = int(_JDR_trans_actions[_trans])
		_nacts = uint(_JDR_actions[_acts])
		_acts++
		for ; _nacts > 0; _nacts-- {
			_acts++
			switch _JDR_actions[_acts-1] {
			case 0:

				mark0[JDRNL] = p
			case 1:

				err = JDRonNL(data[mark0[JDRNL]:p], state)
				if err != nil {
					p++
					goto _out

				}

			case 2:

				mark0[JDRUtf8cp1] = p
			case 3:

				err = JDRonUtf8cp1(data[mark0[JDRUtf8cp1]:p], state)
				if err != nil {
					p++
					goto _out

				}

			case 4:

				mark0[JDRUtf8cp2] = p
			case 5:

				err = JDRonUtf8cp2(data[mark0[JDRUtf8cp2]:p], state)
				if err != nil {
					p++
					goto _out

				}

			case 6:

				mark0[JDRUtf8cp3] = p
			case 7:

				err = JDRonUtf8cp3(data[mark0[JDRUtf8cp3]:p], state)
				if err != nil {
					p++
					goto _out

				}

			case 8:

				mark0[JDRUtf8cp4] = p
			case 9:

				err = JDRonUtf8cp4(data[mark0[JDRUtf8cp4]:p], state)
				if err != nil {
					p++
					goto _out

				}

			case 10:

				mark0[JDRInt] = p
			case 11:

				err = JDRonInt(data[mark0[JDRInt]:p], state)
				if err != nil {
					p++
					goto _out

				}

			case 12:

				mark0[JDRFloat] = p
			case 13:

				err = JDRonFloat(data[mark0[JDRFloat]:p], state)
				if err != nil {
					p++
					goto _out

				}

			case 14:

				mark0[JDRTerm] = p
			case 15:

				err = JDRonTerm(data[mark0[JDRTerm]:p], state)
				if err != nil {
					p++
					goto _out

				}

			case 16:

				mark0[JDRRef] = p
			case 17:

				err = JDRonRef(data[mark0[JDRRef]:p], state)
				if err != nil {
					p++
					goto _out

				}

			case 18:

				mark0[JDRString] = p
			case 19:

				err = JDRonString(data[mark0[JDRString]:p], state)
				if err != nil {
					p++
					goto _out

				}

			case 20:

				mark0[JDRMLString] = p
			case 21:

				err = JDRonMLString(data[mark0[JDRMLString]:p], state)
				if err != nil {
					p++
					goto _out

				}

			case 22:

				mark0[JDRStamp] = p
			case 23:

				err = JDRonStamp(data[mark0[JDRStamp]:p], state)
				if err != nil {
					p++
					goto _out

				}

			case 24:

				mark0[JDRNoStamp] = p
			case 25:

				err = JDRonNoStamp(data[mark0[JDRNoStamp]:p], state)
				if err != nil {
					p++
					goto _out

				}

			case 26:

				mark0[JDROpenP] = p
			case 27:

				err = JDRonOpenP(data[mark0[JDROpenP]:p], state)
				if err != nil {
					p++
					goto _out

				}

			case 28:

				mark0[JDRCloseP] = p
			case 29:

				err = JDRonCloseP(data[mark0[JDRCloseP]:p], state)
				if err != nil {
					p++
					goto _out

				}

			case 30:

				mark0[JDROpenL] = p
			case 31:

				err = JDRonOpenL(data[mark0[JDROpenL]:p], state)
				if err != nil {
					p++
					goto _out

				}

			case 32:

				mark0[JDRCloseL] = p
			case 33:

				err = JDRonCloseL(data[mark0[JDRCloseL]:p], state)
				if err != nil {
					p++
					goto _out

				}

			case 34:

				mark0[JDROpenE] = p
			case 35:

				err = JDRonOpenE(data[mark0[JDROpenE]:p], state)
				if err != nil {
					p++
					goto _out

				}

			case 36:

				mark0[JDRCloseE] = p
			case 37:

				err = JDRonCloseE(data[mark0[JDRCloseE]:p], state)
				if err != nil {
					p++
					goto _out

				}

			case 38:

				mark0[JDROpenX] = p
			case 39:

				err = JDRonOpenX(data[mark0[JDROpenX]:p], state)
				if err != nil {
					p++
					goto _out

				}

			case 40:

				mark0[JDRCloseX] = p
			case 41:

				err = JDRonCloseX(data[mark0[JDRCloseX]:p], state)
				if err != nil {
					p++
					goto _out

				}

			case 42:

				mark0[JDRComma] = p
			case 43:

				err = JDRonComma(data[mark0[JDRComma]:p], state)
				if err != nil {
					p++
					goto _out

				}

			case 44:

				mark0[JDRColon] = p
			case 45:

				err = JDRonColon(data[mark0[JDRColon]:p], state)
				if err != nil {
					p++
					goto _out

				}

			case 46:

				mark0[JDRSemicolon] = p
			case 47:

				err = JDRonSemicolon(data[mark0[JDRSemicolon]:p], state)
				if err != nil {
					p++
					goto _out

				}

			case 48:

				mark0[JDROpen] = p
			case 49:

				err = JDRonOpen(data[mark0[JDROpen]:p], state)
				if err != nil {
					p++
					goto _out

				}

			case 50:

				mark0[JDRClose] = p
			case 51:

				err = JDRonClose(data[mark0[JDRClose]:p], state)
				if err != nil {
					p++
					goto _out

				}

			case 52:

				mark0[JDRInter] = p
			case 53:

				err = JDRonInter(data[mark0[JDRInter]:p], state)
				if err != nil {
					p++
					goto _out

				}

			case 54:

				mark0[JDRFIRST] = p
			case 55:

				err = JDRonFIRST(data[mark0[JDRFIRST]:p], state)
				if err != nil {
					p++
					goto _out

				}

			case 56:

				mark0[JDRRoot] = p

			}
		}

	_again:
		if cs == 0 {
			goto _out
		}
		p++
		if p != pe {
			goto _resume
		}
	_test_eof:
		{
		}
		if p == eof {
			__acts := _JDR_eof_actions[cs]
			__nacts := uint(_JDR_actions[__acts])
			__acts++
			for ; __nacts > 0; __nacts-- {
				__acts++
				switch _JDR_actions[__acts-1] {
				case 1:

					err = JDRonNL(data[mark0[JDRNL]:p], state)
					if err != nil {
						p++
						goto _out

					}

				case 11:

					err = JDRonInt(data[mark0[JDRInt]:p], state)
					if err != nil {
						p++
						goto _out

					}

				case 13:

					err = JDRonFloat(data[mark0[JDRFloat]:p], state)
					if err != nil {
						p++
						goto _out

					}

				case 15:

					err = JDRonTerm(data[mark0[JDRTerm]:p], state)
					if err != nil {
						p++
						goto _out

					}

				case 17:

					err = JDRonRef(data[mark0[JDRRef]:p], state)
					if err != nil {
						p++
						goto _out

					}

				case 19:

					err = JDRonString(data[mark0[JDRString]:p], state)
					if err != nil {
						p++
						goto _out

					}

				case 21:

					err = JDRonMLString(data[mark0[JDRMLString]:p], state)
					if err != nil {
						p++
						goto _out

					}

				case 23:

					err = JDRonStamp(data[mark0[JDRStamp]:p], state)
					if err != nil {
						p++
						goto _out

					}

				case 24:

					mark0[JDRNoStamp] = p
				case 25:

					err = JDRonNoStamp(data[mark0[JDRNoStamp]:p], state)
					if err != nil {
						p++
						goto _out

					}

				case 27:

					err = JDRonOpenP(data[mark0[JDROpenP]:p], state)
					if err != nil {
						p++
						goto _out

					}

				case 29:

					err = JDRonCloseP(data[mark0[JDRCloseP]:p], state)
					if err != nil {
						p++
						goto _out

					}

				case 31:

					err = JDRonOpenL(data[mark0[JDROpenL]:p], state)
					if err != nil {
						p++
						goto _out

					}

				case 33:

					err = JDRonCloseL(data[mark0[JDRCloseL]:p], state)
					if err != nil {
						p++
						goto _out

					}

				case 35:

					err = JDRonOpenE(data[mark0[JDROpenE]:p], state)
					if err != nil {
						p++
						goto _out

					}

				case 37:

					err = JDRonCloseE(data[mark0[JDRCloseE]:p], state)
					if err != nil {
						p++
						goto _out

					}

				case 39:

					err = JDRonOpenX(data[mark0[JDROpenX]:p], state)
					if err != nil {
						p++
						goto _out

					}

				case 41:

					err = JDRonCloseX(data[mark0[JDRCloseX]:p], state)
					if err != nil {
						p++
						goto _out

					}

				case 43:

					err = JDRonComma(data[mark0[JDRComma]:p], state)
					if err != nil {
						p++
						goto _out

					}

				case 45:

					err = JDRonColon(data[mark0[JDRColon]:p], state)
					if err != nil {
						p++
						goto _out

					}

				case 47:

					err = JDRonSemicolon(data[mark0[JDRSemicolon]:p], state)
					if err != nil {
						p++
						goto _out

					}

				case 49:

					err = JDRonOpen(data[mark0[JDROpen]:p], state)
					if err != nil {
						p++
						goto _out

					}

				case 51:

					err = JDRonClose(data[mark0[JDRClose]:p], state)
					if err != nil {
						p++
						goto _out

					}

				case 53:

					err = JDRonInter(data[mark0[JDRInter]:p], state)
					if err != nil {
						p++
						goto _out

					}

				case 55:

					err = JDRonFIRST(data[mark0[JDRFIRST]:p], state)
					if err != nil {
						p++
						goto _out

					}

				case 56:

					mark0[JDRRoot] = p
				case 57:

					err = JDRonRoot(data[mark0[JDRRoot]:p], state)
					if err != nil {
						p++
						goto _out

					}

				}
			}
		}

	_out:
		{
		}
	}
	//fmt.Println("?")
	if p == len(data) && cs < JDR_first_final {
		return ErrIncomplete
	}
	if p != len(data) || cs < JDR_first_final || err != nil {
		if p > len(data) {
			p = len(data)
		}
		state.jdr = state.jdr[p:]
		if err == nil {
			err = ErrBadJDRSyntax
		}
	}
	return
}
